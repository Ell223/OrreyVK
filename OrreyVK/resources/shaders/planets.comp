#version 450
#define M_PI 3.1415926535897932384626433832795
precision highp float;

#extension GL_KHR_shader_subgroup_basic: enable
#extension GL_EXT_nonuniform_qualifier : enable

struct CelestialObj
{
	vec4 pos;
	vec4 vel;
  vec4 scale;
  vec4 rotation;
  vec4 rotationSpeed;
  vec4 posOffset;
  vec4 orbitalTilt;
  vec4 colourTint;
};

// Binding 0 : Position storage buffer
layout(std140, binding = 0) buffer Pos 
{
   CelestialObj celestialObj[ ];
};

layout (local_size_x_id = 0) in;

layout (binding = 1) uniform UBO 
{
	float deltaT;
	int objectCount;
  int scale;
  float speed;
} ubo;

float UpdateRotation(float currentRotation, float rotationSpeed)
{
  float newRotation = currentRotation;
  newRotation += rotationSpeed;
  if(newRotation >= 2*M_PI) { newRotation = 0; }
  return newRotation;
}

void CalculatePosition(uint index)
{
  vec3 vPos = celestialObj[index].pos.xyz;
  vec3 vVel = celestialObj[index].vel.xyz;

  float xT = (vPos.x / ubo.scale);
  float zT = (vPos.z / ubo.scale);

  float xV = vVel.x;
  float zV = vVel.z;
  float G = 0.0002959122083;
  
  float radiusSquared = pow(xT, 2) + pow(zT, 2);
	vec3 forceDir = normalize(vPos);

  vec3 gravAcc = (forceDir * G) / radiusSquared;

  xV += (gravAcc.x * ubo.deltaT * ubo.speed);
  zV += (gravAcc.z * ubo.deltaT * ubo.speed);
  
  xT -= xV * ubo.deltaT * ubo.speed;
  zT -= zV * ubo.deltaT * ubo.speed;

  xT *= ubo.scale;
  zT *= ubo.scale;

  // Write back
  celestialObj[index].pos.x = xT;
  celestialObj[index].pos.z = zT;

  int orbitalIndex = int(celestialObj[index].posOffset.w);
  celestialObj[index].posOffset.x = celestialObj[nonuniformEXT(orbitalIndex)].pos.x;
  celestialObj[index].posOffset.z = celestialObj[nonuniformEXT(orbitalIndex)].pos.z;

  celestialObj[index].vel.x = xV;
  celestialObj[index].vel.z = zV;
}

void main() 
{
  // Current SSBO index
  uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
  if (index >= ubo.objectCount) 
	  return;	

  if(index != 0 && celestialObj[index].posOffset.w == 0.0) //Calcuate planets first
  {
    CalculatePosition(index); //Sun has a mass of 1 SM
  }

  barrier();
  subgroupBarrier();

  if(index != 0 && celestialObj[index].posOffset.w != 0.0) //Calculate moons
  {
    
    CalculatePosition(index); //Pass it the mass of the moons orbiting body
  }
  
  //Rotation
  vec4 newRotation = celestialObj[index].rotation;
  newRotation.x = UpdateRotation(newRotation.x, celestialObj[index].rotationSpeed.x * ubo.deltaT * ubo.speed);
  newRotation.y = UpdateRotation(newRotation.y, celestialObj[index].rotationSpeed.y * ubo.deltaT * ubo.speed);
  newRotation.z = UpdateRotation(newRotation.z, celestialObj[index].rotationSpeed.z * ubo.deltaT * ubo.speed);

  celestialObj[index].rotation = newRotation;
  
}


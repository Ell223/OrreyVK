#version 450
#define M_PI 3.1415926535897932384626433832795

struct CelestialObj
{
	vec4 pos;
	vec4 vel;
  vec4 scale;
  vec4 rotation;
  vec4 rotationSpeed;
};

// Binding 0 : Position storage buffer
layout(std140, binding = 0) buffer Pos 
{
   CelestialObj celestialObj[ ];
};

layout (local_size_x = 256) in;

layout (binding = 1) uniform UBO 
{
	float deltaT;
	int objectCount;
  int scale;
  float speed;
} ubo;

float UpdateRotation(float currentRotation, float rotationSpeed)
{
  float newRotation = currentRotation;
  newRotation += rotationSpeed;
  if(newRotation >= 2*M_PI) { newRotation = 0; }
  return newRotation;
}

void main() 
{
  // Current SSBO index
  uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
  if (index >= ubo.objectCount) 
	return;	

  // Read position and velocity
  vec3 vPos = celestialObj[index].pos.xyz;
  vec3 vVel = celestialObj[index].vel.xyz;
  float xT = vPos.x / ubo.scale;
  float zT = vPos.z / ubo.scale;
  float xV = vVel.x;
  float zV = vVel.z;
  float G = 0.0002959122083;
  if(celestialObj[index].pos.w != 0.0)
  {
    float radius = sqrt((xT * xT) + (zT * zT));
    float gravAcc = (G * celestialObj[index].pos.w) / (radius * radius);
    float angle = atan(xT, zT);

    float acc = gravAcc / celestialObj[index].pos.w;
    
    xV += (sin(angle) * acc * ubo.deltaT * ubo.speed);
    zV += (cos(angle) * acc * ubo.deltaT * ubo.speed);

    xT -= xV * ubo.deltaT * ubo.speed;
    zT -= zV * ubo.deltaT * ubo.speed;

    xT *= ubo.scale;
    zT *= ubo.scale;

    // Write back
    celestialObj[index].pos.x = xT;
    celestialObj[index].pos.z = zT;

    celestialObj[index].vel.x = xV;
    celestialObj[index].vel.z = zV;

  }
  
  //Rotation
  vec4 newRotation = celestialObj[index].rotation;
  newRotation.x = UpdateRotation(newRotation.x, celestialObj[index].rotationSpeed.x * ubo.deltaT * ubo.speed);
  newRotation.y = UpdateRotation(newRotation.y, celestialObj[index].rotationSpeed.y * ubo.deltaT * ubo.speed);
  newRotation.z = UpdateRotation(newRotation.z, celestialObj[index].rotationSpeed.z * ubo.deltaT * ubo.speed);

  celestialObj[index].rotation = newRotation;
  
}


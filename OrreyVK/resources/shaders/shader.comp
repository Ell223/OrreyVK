#version 450

struct CelestialObj
{
	vec4 pos;
	vec4 vel;
};

// Binding 0 : Position storage buffer
layout(std140, binding = 0) buffer Pos 
{
   CelestialObj celestialObj[ ];
};

layout (local_size_x = 256) in;

layout (binding = 1) uniform UBO 
{
	float deltaT;
	int objectCount;
} ubo;

void main() 
{
  // Current SSBO index
  uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
  if (index >= ubo.objectCount) 
	return;	

  // Read position and velocity
  vec3 vPos = celestialObj[index].pos.xyz;
  vec3 vVel = celestialObj[index].vel.xyz;
  float xT = vPos.x;
  float zT = vPos.z;
  float xV = vVel.x;
  float zV = vVel.z;
  if(xT != 0.0 || zT != 0.0)
  {
    float radius = sqrt((xT * xT) + (zT * zT));
    float gravAcc = 6.6742e-11 * (celestialObj[index].pos.w / (radius * radius));
    float angle = atan(xT, zT);
    xV += sin(angle) * gravAcc;
    zV += cos(angle) * gravAcc;

    xT -= xV;
    zT -= zV;
    // Write back
    celestialObj[index].pos.x = xT;
    celestialObj[index].pos.z = zT;

    celestialObj[index].vel.x = xV;
    celestialObj[index].vel.z = zV;
  }
  
}

